"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var SkipValidation = exports.SkipValidation = function SkipValidation(message) {
	this.name = "SkipValidation";
	this.message = message;
};

var validateSingle = exports.validateSingle = function validateSingle(data, validators, multipleErrors, all, key) {
	var errors = [];

	if (typeof validators === "function") {
		validators = [validators];
	}

	for (var i = 0; i < validators.length; i++) {
		try {
			var error = validators[i](data, all);
			if (typeof error === "string") {
				errors.push(error.replace("{value}", data).replace("{key}", key));
			}
		} catch (err) {
			if (err instanceof SkipValidation) {
				break;
			}
		}
	}

	if (multipleErrors === true) return errors;

	if (errors.length > 0) return errors[0];
};

var validate = exports.validate = function validate(data, validators, multipleErrors) {
	if (!validators) return;

	var errors = {};
	var noError = true;

	if ((typeof validators === "undefined" ? "undefined" : _typeof(validators)) === "object" && !validators.length) {
		for (var prop in validators) {
			if (validators.hasOwnProperty(prop)) {
				var error = validateSingle(data[prop], validators[prop], multipleErrors, data, prop);

				if (error !== undefined) {
					noError = false;
				}

				errors[prop] = error;
			}
		}

		return noError ? undefined : errors;
	}

	errors = validateSingle(data, validators, multipleErrors);
	return errors;
};

var required = exports.required = function required(flag, error) {
	function isNullLike(value) {
		return value === undefined || value === "" || value === null;
	}

	return function (value) {
		if (flag && isNullLike(value)) {
			return error || "This field is required.";
		} else if (!flag && isNullLike(value)) {
			// skip rest of the validators
			throw new SkipValidation();
		}
	};
};

var isNumber = exports.isNumber = function isNumber(error) {
	return function (value) {
		if (typeof value !== "number" || isNaN(value)) {
			return error || "'{value}' is not a valid number.";
		}
	};
};

var isString = exports.isString = function isString(error) {
	return function (value) {
		if (typeof value !== "string") {
			return error || "'{value}' is not a valid string.";
		}
	};
};

var isFunction = exports.isFunction = function isFunction(error) {
	return function (value) {
		if (typeof value !== "function") {
			return error || "Expected a function.";
		}
	};
};

var isObject = exports.isObject = function isObject(error) {
	return function (value) {
		if (value !== Object(value)) {
			return error || "Expected an object.";
		}
	};
};

var isArray = exports.isArray = function isArray(error) {
	return function (value) {
		if (Object.prototype.toString.call(value) !== "[object Array]") {
			return error || "Expected an array.";
		}
	};
};

var length = exports.length = function length(_length, error) {
	return function (value) {
		var str = value + "";
		if (str.length !== _length) {
			return error || "It must be " + _length + " characters long.";
		}
	};
};

var isEmail = exports.isEmail = function isEmail(error) {
	return function (value) {
		var pattern = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
		if (!pattern.test(value)) {
			return error || "Invalid email id.";
		}
	};
};

var equalsTo = exports.equalsTo = function equalsTo(key, error) {
	return function (value, all) {
		if (value !== all[key]) {
			return error || "'{key}' and '" + key + "' do not match.";
		}
	};
};

var minLength = exports.minLength = function minLength(length, error) {
	return function (value) {
		var str = value + "";
		if (str.length < length) {
			return error || "It must be at least " + length + " characters long.";
		}
	};
};

var maxLength = exports.maxLength = function maxLength(length, error) {
	return function (value) {
		var str = value + "";
		if (str.length > length) {
			return error || "It must be at most " + length + " characters long.";
		}
	};
};

var isBoolean = exports.isBoolean = function isBoolean(error) {
	return function (value) {
		if (value !== true && value !== false) {
			return error || "Invalid boolean value.";
		}
	};
};

var within = exports.within = function within(list, error) {
	return function (value) {
		if (!(value instanceof Array)) {
			value = [value];
		}

		var odds = [];

		for (var index = 0; index < value.length; index++) {
			if (list.indexOf(value[index]) === -1) {
				odds.push(value[index]);
			}
		}

		if (odds.length > 0) {
			return error || "[" + odds + "] do not fall under the allowed list.";
		}
	};
};

var excludes = exports.excludes = function excludes(list, error) {
	return function (value) {
		if (!(value instanceof Array)) {
			value = [value];
		}

		var odds = [];

		for (var index = 0; index < value.length; index++) {
			if (list.indexOf(value[index]) !== -1) {
				odds.push(value[index]);
			}
		}

		if (odds.length > 0) {
			return error || "[" + odds + "] fall under restricted values.";
		}
	};
};

var pattern = exports.pattern = function pattern(regex, error) {
	return function (value) {
		if (!regex.test(value)) {
			return error || "'{value}' does not match with the pattern.";
		}
	};
};