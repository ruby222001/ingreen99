"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var required = exports.required = function required(flag, error) {
	return function (value) {
		if (flag && !value) {
			throw Error(error || "This field is required.");
		} else if (!flag && !value) {
			// skip rest of the validators
			return false;
		}
	};
};

var isNumber = exports.isNumber = function isNumber(error) {
	return function (value) {
		if (typeof value !== "number" || isNaN(value)) {
			throw Error(error || "'{value}' is not a valid number.");
		}
	};
};

var isString = exports.isString = function isString(error) {
	return function (value) {
		if (typeof value !== "string") {
			throw Error(error || "'{value}' is not a valid string.");
		}
	};
};

var isFunction = exports.isFunction = function isFunction(error) {
	return function (value) {
		if (typeof value !== "function") {
			throw Error(error || "Expected a function.");
		}
	};
};

var isObject = exports.isObject = function isObject(error) {
	return function (value) {
		if (value !== Object(value)) {
			throw Error(error || "Expected an object.");
		}
	};
};

var isArray = exports.isArray = function isArray(error) {
	return function (value) {
		if (Object.prototype.toString.call(value) !== "[object Array]") {
			throw Error(error || "Expected an array.");
		}
	};
};

var oneOf = exports.oneOf = function oneOf(list, error) {
	return function (value) {
		var hasAMatch = false;
		for (var i = 0; i < list.length; i++) {
			if (list[i] === value) {
				hasAMatch = true;
			}
		}

		if (!hasAMatch) {
			throw Error(error || "'{value}' does not fall under the given list.");
		}
	};
};

var noneOf = exports.noneOf = function noneOf(list, error) {
	return function (value) {
		for (var i = 0; i < list.length; i++) {
			if (list[i] === value) {
				throw Error(error || "'{value}' is not allowed.");
			}
		}
	};
};

var hasLength = exports.hasLength = function hasLength(length, error) {
	return function (value) {
		var str = value + "";
		if (str.length !== length) {
			throw Error(error || "It must be " + length + " digits long.");
		}
	};
};

var isEmail = exports.isEmail = function isEmail(error) {
	return function (value) {
		var pattern = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
		if (!pattern.test(value)) {
			throw Error(error || "Invalid email id.");
		}
	};
};

var equalsTo = exports.equalsTo = function equalsTo(key, error) {
	return function (value, all) {
		if (value !== all[key]) {
			throw Error(error || "'{key}' and '" + key + "' do not match.");
		}
	};
};